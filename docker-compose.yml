version: '3.9'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
    networks:
      - backend

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 29092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      DYNAMIC_CONFIG_ENABLED: 'true'
    networks:
      - backend
       
  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - 8090:8070
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
      - SERVER.PORT=8070
    networks:
      - backend

  database:
    image: postgres:16
    restart: always
    environment:
      POSTGRES_USER: 'admin'
      POSTGRES_PASSWORD: 'password'
      POSTGRES_DB: 'production'
    networks:
      - backend
    ports:
      - '5430:5432'
    volumes:
      - database-pg:/var/lib/postgresql/data
      - ./infrastructure/database/init.sql:/docker-entrypoint-initdb.d/init.sql

  award-service:
    build:
      args:
        progress: plain
      context: ./award-service
      dockerfile: ./Dockerfile
    networks:
      - backend
    restart: always
    ports:
      - '3002:3002'
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 512m
        reservations:
          memory: 256m

  storage-service:
    build:
      args:
        progress: plain
      context: ./storage-service
      dockerfile: ./Dockerfile
    networks:
      - backend
    restart: always
    ports:
      #- '127.0.0.1:3000:3000'  доступ к S3 сервису будет только внутри сети docker 
      - '3000:3000'
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 512m
        reservations:
          memory: 256m

  tasks-service:
    build:
      args:
        progress: plain
      context: ./tasks-service
      dockerfile: ./Dockerfile
    depends_on:
      - storage-service
    networks:
      - backend
    restart: always
    ports:
      - '3001:3001'
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 512m
        reservations:
          memory: 256m

  award-service:
    build:
      args:
        progress: plain
      context: ./award-service
      dockerfile: ./Dockerfile
    depends_on:
      - storage-service
    networks:
      - backend
    restart: always
    ports:
      - '3002:3002'
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 512m
        reservations:
          memory: 256m

  main-service:
    build:
      args:
        progress: plain
      context: ./main-service
      dockerfile: ./Dockerfile
    depends_on:
      - database
      - storage-service
    networks:
      - backend
    restart: always
    ports:
      - '8080:8080'
      - '8081:8081'
    environment:
      - ASPNETCORE_ENVIRONMENT=Release
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 1024m
        reservations:
          memory: 512m
  
  jenkins:
    image: jenkins/jenkins:lts
    container_name: jenkins_lts
    user: root
    volumes:
      - ./jenkins_home/:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock:rw
      - /usr/bin/docker:/usr/bin/docker
    network_mode: host
    ports:
      - 1337:1337
    environment:
      - JENKINS_OPTS="--httpPort=1337"
    restart: always

  nginx:
    image: 'jc21/nginx-proxy-manager:latest'
    restart: unless-stopped
    ports:
      # These ports are in format <host-port>:<container-port>
      - '80:80' # Public HTTP Port
      - '443:443' # Public HTTPS Port
      - '81:81' # Admin Web Port
      # Add any other Stream port you want to expose
      # - '21:21' # FTP

    # Uncomment the next line if you uncomment anything in the section
    # environment:
      # Uncomment this if you want to change the location of
      # the SQLite DB file within the container
      # DB_SQLITE_FILE: "/data/database.sqlite"

      # Uncomment this if IPv6 is not enabled on your host
      # DISABLE_IPV6: 'true'

    volumes:
      - ./data:/data
      - ./letsencrypt:/etc/letsencrypt

networks:
  backend:
    driver: bridge

volumes:
  database-pg:
